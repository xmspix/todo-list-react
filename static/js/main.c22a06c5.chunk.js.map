{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","text","done","slide","todo","setTodo","removeToDo","i","splice","className","onSubmit","e","preventDefault","_todo","document","getElementById","value","type","id","aria-describedby","placeholder","autoComplete","length","map","itm","onAnimationEnd","key","name","onChange","defaultChecked","htmlFor","onClick","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qQAgGeA,G,MA7FH,WAAO,IAAD,EACQC,mBAAS,CAC/B,CACEC,KAAM,WACNC,MAAM,EACNC,OAAO,KALK,mBACTC,EADS,KACHC,EADG,KAkEVC,EAAa,SAAAC,IACN,IAAPA,IACFH,EAAKI,OAAOD,EAAG,GACfF,EAAQ,YAAID,MAIhB,OACE,yBAAKK,UAAU,aACb,yCACA,0BAAMC,SArBM,SAAAC,GACdA,EAAEC,iBACF,IAAIC,EAAQ,CACVZ,KAAMa,SAASC,eAAe,QAAQC,MACtCd,MAAM,EACNC,OAAO,GAETE,EAAQ,GAAD,mBAAKD,GAAL,CAAWS,KAClBC,SAASC,eAAe,QAAQC,MAAQ,KAcpC,2BACEC,KAAK,OACLC,GAAG,OACHC,mBAAiB,OACjBC,YAAY,qBACZC,aAAa,QAEf,4BAAQJ,KAAK,SAASR,UAAU,eAAhC,MAIF,mBA/Ea,WACf,OAAoB,IAAhBL,EAAKkB,OAEL,oCACGlB,EAAKmB,KAAI,SAACC,EAAKjB,GAAN,OACR,wBACEE,UAAWe,EAAIrB,MAAQ,uBAAyB,YAChDsB,eAAgB,SAAAd,GACdP,EAAKG,GAAGJ,OAAQ,EAChBE,EAAQ,YAAID,KAEdsB,IAAKnB,GAEL,4BACE,2BACEW,GAAE,eAAUX,GACZU,KAAK,WACLR,UAAU,gBACVkB,KAAMH,EAAIvB,KACVe,MAAOQ,EAAIvB,KACX2B,SAAU,WACHxB,EAAKG,GAAGL,MAIXE,EAAKG,GAAGL,MAAO,EACfG,EAAQ,YAAID,MAJZA,EAAKG,GAAGL,MAAO,EACfG,EAAQ,YAAID,MAMhByB,eAAgBL,EAAItB,OAEtB,2BAAO4B,QAAO,eAAUvB,KACxB,0BAAME,UAAU,aAAae,EAAIvB,MACjC,4BAAQQ,UAAU,aAAasB,QAAS,kBAAMzB,EAAWC,KAAzD,WASH,OAqCP,CAAUE,UAAU,YC/ENuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASxB,SAASC,eAAe,SD6H3C,kBAAmBwB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c22a06c5.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./Style.css\";\n\nconst App = () => {\n  const [todo, setTodo] = useState([\n    {\n      text: \"Buy Milk\",\n      done: false,\n      slide: true\n    }\n  ]);\n\n  const ToDoList = () => {\n    if (todo.length !== 0) {\n      return (\n        <>\n          {todo.map((itm, i) => (\n            <ul\n              className={itm.slide ? \"todo-list slide-left\" : \"todo-list\"}\n              onAnimationEnd={e => {\n                todo[i].slide = false;\n                setTodo([...todo]);\n              }}\n              key={i}\n            >\n              <li>\n                <input\n                  id={`item_${i}`}\n                  type=\"checkbox\"\n                  className=\"todo-checkbox\"\n                  name={itm.text}\n                  value={itm.text}\n                  onChange={() => {\n                    if (!todo[i].done) {\n                      todo[i].done = true;\n                      setTodo([...todo]);\n                    } else {\n                      todo[i].done = false;\n                      setTodo([...todo]);\n                    }\n                  }}\n                  defaultChecked={itm.done}\n                />\n                <label htmlFor={`item_${i}`}></label>\n                <span className=\"todo-text\">{itm.text}</span>\n                <button className=\"btn delete\" onClick={() => removeToDo(i)}>\n                  x\n                </button>\n              </li>\n            </ul>\n          ))}\n        </>\n      );\n    } else {\n      return null;\n    }\n  };\n\n  const addToDo = e => {\n    e.preventDefault();\n    let _todo = {\n      text: document.getElementById(\"todo\").value,\n      done: false,\n      slide: true\n    };\n    setTodo([...todo, _todo]);\n    document.getElementById(\"todo\").value = \"\";\n  };\n\n  const removeToDo = i => {\n    if (i !== -1) {\n      todo.splice(i, 1);\n      setTodo([...todo]);\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Todo List</h1>\n      <form onSubmit={addToDo}>\n        <input\n          type=\"text\"\n          id=\"todo\"\n          aria-describedby=\"todo\"\n          placeholder=\"Add some text here\"\n          autoComplete=\"off\"\n        />\n        <button type=\"submit\" className=\"btn btn-add\">\n          +\n        </button>\n      </form>\n      <ToDoList className=\"list\" />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}